name: "Build"

on:
  pull_request:
    branches:
      - ci
  push:
    branches:
      - ci

jobs:  
  build:      
    name: Build & Release 
    runs-on: macos-latest 

    steps:
        #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

        # 2. Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: flutter-${{ matrix.flutter-version }}-${{ runner.os }}
          restore-keys: |
            flutter-

        # 3. Set Up Flutter
      - name: Set Up Flutter
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      # 4. Cache Java (optional, if Java setup is taking time)
      - name: Cache Java
        uses: actions/cache@v3
        with:
          path: ~/.java
          key: java-oracle-${{ runner.os }}-17
          restore-keys: |
            java-

        # 5. Set Up Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

        

        #6 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

        #7 Setup Keystore
      # - name: Decode Keystore
      #   run: |
      #     echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      # - name: Create key.properties
      #   run: |
      #     echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
      #     echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      #     echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
      #     echo "storeFile=keystore.jks" >> android/key.properties
        
       #8 Building APK
      - name: Build APK
        run: flutter build apk --release  --obfuscate --split-debug-info=misc --tree-shake-icons

        #9 Building App Bundle (aab)
      # - name: Build appBundle
      #   run: flutter build appbundle

        #10 Build IPA ( IOS Build )
      # - name: Build IPA
      #   run: flutter build ipa --no-codesign

      # - name: Compress Archives and IPAs
      #   run: |
      #     cd build
      #     tar -czf ios_build.tar.gz ios

        #11 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab

        #12 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #13 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #15 Modify Tag if it Exists
      # - name: Modify Tag
      #   if: env.TAG_EXISTS == 'true'
      #   id: modify_tag
      #   run: |
      #     new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
      #     echo "VERSION=$new_version" >> $GITHUB_ENV

      #16 generate tag for the release
      - name: Generate Unique Tag
        id: generate_tag
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          echo "TAG=v${{ env.VERSION }}-${timestamp}" >> $GITHUB_ENV
 
        #17 Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios_build.tar.gz"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          # allowUpdates: true